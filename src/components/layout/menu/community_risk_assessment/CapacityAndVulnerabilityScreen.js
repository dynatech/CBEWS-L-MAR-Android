import React, { useState, Fragment } from 'react';
import DatePicker from 'react-native-datepicker';
import { View, Text, ScrollView, TextInput, TouchableOpacity, Alert, ToastAndroid } from 'react-native';
import { ContainerStyle } from '../../../../styles/container_style'
import { InputStyle } from '../../../../styles/input_style';
import { LabelStyle } from '../../../../styles/label_style';
import { ButtonStyle } from '../../../../styles/button_style';
import { DataTable } from 'react-native-paper';

function CapacityAndVulnerabilityScreen(props) {

  const [cavId, setCavId] = useState("");
  const [datetime, setDatetime] = useState("");
  const [resource, setResource] = useState("");
  const [quantity, setQuantity] = useState("");
  const [status, setStatus] = useState("");
  const [owner, setOwner] = useState("");
  const [incharge, setIncharge] = useState("");
  const [updater, setUpdater] = useState("");
  const [datatable_row, setDatatable_row] = useState("");
  const [command_view, setCommand_view] = useState("");

  const init = () => {
    let temp_row = [];
    temp_row.push(
      <DataTable.Row onPress={() => {
        this.selectCell(cavId)
      }}>
        <DataTable.Cell style={{ width: 150 }}>{resource}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{quantity}</DataTable.Cell>
        <DataTable.Cell style={{ width: 200 }}>{status}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{owner}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{incharge}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{updater}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{datetime}</DataTable.Cell>
      </DataTable.Row>
    )
    resetState()
    setDatatable_row(temp_row)
    addVisible()
  }


  const addCaV = () => {
    let { resource, quantity, status, owner,
      incharge, updater, datetime } = this.state;
    let temp_row = []
    let temp_data = this.state
    temp_row.push(this.state.datatable_row)
    temp_row.push(
      <DataTable.Row onPress={() => {
        this.selectCell(temp_data)
      }}>
        <DataTable.Cell style={{ width: 150 }}>{resource}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{quantity}</DataTable.Cell>
        <DataTable.Cell style={{ width: 200 }}>{status}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{owner}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{incharge}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{updater}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{datetime}</DataTable.Cell>
      </DataTable.Row>
    )
    this.setState({ datatable_row: temp_row })
    ToastAndroid.show("Added Successfully!", ToastAndroid.SHORT)
  }

  const resetState = () => {

  }

  const selectCell = (data) => {
    modifyVisible();
  }

  const addVisible = () => {
    setCommand_view([
      <View style={{ paddingTop: '10%', alignItems: 'center' }}>
        <TouchableOpacity style={ButtonStyle.medium} onPress={() => { this.addCaV() }}>
          <Text style={ButtonStyle.large_text}>Add +</Text>
        </TouchableOpacity>
      </View>
    ])
  }

  const modifyVisible = () => {
    setCommand_view([
      <View style={{ paddingTop: '10%', alignItems: 'center', flexDirection: 'row'}}>
        <TouchableOpacity style={ButtonStyle.extra_small} onPress={() => { this.updateCaV() }}>
          <Text style={ButtonStyle.medium_text}>Update</Text>
        </TouchableOpacity>
        <TouchableOpacity style={ButtonStyle.extra_small} onPress={() => { this.deleteCaV() }}>
          <Text style={ButtonStyle.medium_text}>Delete</Text>
        </TouchableOpacity>
        <TouchableOpacity style={ButtonStyle.extra_small} onPress={() => { this.cancelModification() }}>
          <Text style={ButtonStyle.medium_text}>Cancel</Text>
        </TouchableOpacity>
      </View>
    ])
  }

  const cancelModification = () => {
    // this.addVisible()
    // this.resetState()
  }

  const updateCaV = (data) => {
    Alert.alert(
      'Notice',
      'Are you sure you want to update this entry?',
      [
        {text: 'No', onPress: ()=> {console.log("Cancelled")},style: 'cancel'},
        {text: 'Yes', onPress: () => ToastAndroid.show("Data up to date!", ToastAndroid.SHORT)}
      ]
    )
  }

  const deleteCaV = () => {
    Alert.alert(
      'Notice',
      'Are you sure you want to delete this entry?',
      [
        {text: 'No', onPress: ()=> {console.log("Cancelled")},style: 'cancel'},
        {text: 'Yes', onPress: () => ToastAndroid.show("Successfully deleted!", ToastAndroid.SHORT)}
      ]
    )
  }

  return (
    <ScrollView>
      <View style={ContainerStyle.content}>
        <View style={ContainerStyle.datatable_content}>
          <ScrollView horizontal={true}>
            <DataTable>
              <DataTable.Header>
                <DataTable.Title style={{ width: 150 }}>Resource</DataTable.Title>
                <DataTable.Title style={{ width: 150 }}>Quantity</DataTable.Title>
                <DataTable.Title style={{ width: 200 }}>Status/Description</DataTable.Title>
                <DataTable.Title style={{ width: 150 }}>Owner</DataTable.Title>
                <DataTable.Title style={{ width: 150 }}>In-charge</DataTable.Title>
                <DataTable.Title style={{ width: 150 }}>Updater</DataTable.Title>
                <DataTable.Title style={{ width: 150 }}>Date</DataTable.Title>
              </DataTable.Header>
              { datatable_row }
            </DataTable>
          </ScrollView>
          <DataTable.Pagination
            page={1}
            numberOfPages={3}
            onPageChange={(page) => { console.log(page); }}
            label="1-2 of 6"
          />
        </View>
        <View>
          <Text style={[LabelStyle.small_label, LabelStyle.brand]}>* Click row to modify.</Text>
        </View>
        <View>
          <View style={ContainerStyle.input_label_combo}>
            <Text style={LabelStyle.medium_label}>Resource</Text>
            <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={ resource } onChangeText={text => { setResource(text) }}></TextInput>
          </View>
          <View style={ContainerStyle.input_label_combo}>
            <Text style={LabelStyle.medium_label}>Quantity</Text>
            <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={ quanity } onChangeText={text => { setQuantity(text) }}></TextInput>
          </View>
          <View style={ContainerStyle.input_label_combo}>
            <Text style={LabelStyle.medium_label}>Status/Description</Text>
            <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={ status } onChangeText={text => { setStatus(text) }}></TextInput>
          </View>
          <View style={ContainerStyle.input_label_combo}>
            <Text style={LabelStyle.medium_label}>Owner</Text>
            <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={ owner } onChangeText={text => { setOwner(text) }}></TextInput>
          </View>
          <View style={ContainerStyle.input_label_combo}>
            <Text style={LabelStyle.medium_label}>In-charge</Text>
            <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={ incharge } onChangeText={text => { setIncharge(text) }}></TextInput>
          </View>
          <View style={ContainerStyle.input_label_combo}>
            <Text style={LabelStyle.medium_label}>Updater</Text>
            <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={ updater } onChangeText={text => { setUpdater(text) }}></TextInput>
          </View>
          <View style={ContainerStyle.input_label_combo}>
            <Text style={LabelStyle.medium_label}>Date</Text>
            <DatePicker
              customStyles={{ dateInput: { borderWidth: 0, } }}
              style={[InputStyle.medium, { width: '94%' }, InputStyle.default, InputStyle.black]}
              date={ datetime }
              mode="datetime"
              placeholder="Pick date and time"
              showIcon={false}
              confirmBtnText="Confirm"
              cancelBtnText="Cancel"
              showIcon={false}
              onDateChange={(date) => { setDatetime(date)}}
            />
          </View>
          { command_view }
        </View>
      </View>
    </ScrollView>
  );
}

export default CapacityAndVulnerabilityScreen