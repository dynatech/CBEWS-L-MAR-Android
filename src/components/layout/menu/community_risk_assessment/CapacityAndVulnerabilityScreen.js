import React, { useState, useRef, Fragment } from 'react';
import DatePicker from 'react-native-datepicker';
import moment from "moment";
import Storage from '../../../../reducers/Storage';
import { View, Text, ScrollView, TextInput, TouchableOpacity, Alert, ToastAndroid } from 'react-native';
import { ContainerStyle } from '../../../../styles/container_style'
import { InputStyle } from '../../../../styles/input_style';
import { LabelStyle } from '../../../../styles/label_style';
import { ButtonStyle } from '../../../../styles/button_style';
import { DataTable } from 'react-native-paper';

function CapacityAndVulnerabilityScreen(props) {

  const [cavId, setCavId] = useState("");
  const [datetime, setDatetime] = useState(moment().format('YYYY-MM-DD HH:mm:ss'));
  const [resource, setResource] = useState("");
  const [quantity, setQuantity] = useState("");
  const [status, setStatus] = useState("");
  const [owner, setOwner] = useState("");
  const [incharge, setIncharge] = useState("");
  const [updater, setUpdater] = useState("");
  const [datatableRow, setDatatableRow] = useState([]);
  const [isModify, setIsModify] = useState(false);

  // const init = () => {
  //   let temp_row = [];
  //   temp_row.push(
  //     <DataTable.Row onPress={() => {
  //       this.selectCell(cavId)
  //     }}>
  //       <DataTable.Cell style={{ width: 150 }}>{resource}</DataTable.Cell>
  //       <DataTable.Cell style={{ width: 150 }}>{quantity}</DataTable.Cell>
  //       <DataTable.Cell style={{ width: 200 }}>{status}</DataTable.Cell>
  //       <DataTable.Cell style={{ width: 150 }}>{owner}</DataTable.Cell>
  //       <DataTable.Cell style={{ width: 150 }}>{incharge}</DataTable.Cell>
  //       <DataTable.Cell style={{ width: 150 }}>{updater}</DataTable.Cell>
  //       <DataTable.Cell style={{ width: 150 }}>{datetime}</DataTable.Cell>
  //     </DataTable.Row>
  //   )
  //   resetState()
  //   setDatatable_row(temp_row)
  //   addVisible()
  // }

  const addCaV = () => {
    Storage.getItem('UserCredentials').then(config => {
      fetch('http://192.168.150.28:5000/api/cra/capacity_and_vulnerability/add', {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          "datetime":datetime,
          "resource":resource,
          "quantity":quantity,
          "status":status,
          "owner":owner,
          "incharge":incharge,
          "updater":updater,
          "user_id": config.user_id,
          "site_id": config.site_id
        }),
      }).then((response) => response.json())
        .then((responseJson) => {
          console.log(responseJson)
        })
        .catch((error) => {
          console.log(error)
        }
      );
    })
  }

  const resetState = () => {

  }

  const selectCell = (data) => {
    modifyVisible();
  }

  const addVisible = () => {
    setCommand_view([
      <View style={{ paddingTop: '10%', alignItems: 'center' }}>
        <TouchableOpacity style={ButtonStyle.medium} onPress={() => { addCaV() }}>
          <Text style={ButtonStyle.large_text}>Add +</Text>
        </TouchableOpacity>
      </View>
    ])
  }

  const modifyVisible = () => {
    setCommand_view([
      <View style={{ paddingTop: '10%', alignItems: 'center', flexDirection: 'row' }}>
        <TouchableOpacity style={ButtonStyle.extra_small} onPress={() => { this.updateCaV() }}>
          <Text style={ButtonStyle.medium_text}>Update</Text>
        </TouchableOpacity>
        <TouchableOpacity style={ButtonStyle.extra_small} onPress={() => { this.deleteCaV() }}>
          <Text style={ButtonStyle.medium_text}>Delete</Text>
        </TouchableOpacity>
        <TouchableOpacity style={ButtonStyle.extra_small} onPress={() => { this.cancelModification() }}>
          <Text style={ButtonStyle.medium_text}>Cancel</Text>
        </TouchableOpacity>
      </View>
    ])
  }

  const cancelModification = () => {
    // this.addVisible()
    // this.resetState()
  }

  const updateCaV = (data) => {
    Alert.alert(
      'Notice',
      'Are you sure you want to update this entry?',
      [
        { text: 'No', onPress: () => { console.log("Cancelled") }, style: 'cancel' },
        { text: 'Yes', onPress: () => ToastAndroid.show("Data up to date!", ToastAndroid.SHORT) }
      ]
    )
  }

  const deleteCaV = () => {
    Alert.alert(
      'Notice',
      'Are you sure you want to delete this entry?',
      [
        { text: 'No', onPress: () => { console.log("Cancelled") }, style: 'cancel' },
        { text: 'Yes', onPress: () => ToastAndroid.show("Successfully deleted!", ToastAndroid.SHORT) }
      ]
    )
  }

  return (
    <Fragment>
      <ScrollView>
        <View style={ContainerStyle.content}>
          <View style={ContainerStyle.datatable_content}>
            <ScrollView horizontal={true}>
              <DataTable>
                <DataTable.Header>
                  <DataTable.Title style={{ width: 150 }}>Resource</DataTable.Title>
                  <DataTable.Title style={{ width: 150 }}>Quantity</DataTable.Title>
                  <DataTable.Title style={{ width: 200 }}>Status/Description</DataTable.Title>
                  <DataTable.Title style={{ width: 150 }}>Owner</DataTable.Title>
                  <DataTable.Title style={{ width: 150 }}>In-charge</DataTable.Title>
                  <DataTable.Title style={{ width: 150 }}>Updater</DataTable.Title>
                  <DataTable.Title style={{ width: 150 }}>Date</DataTable.Title>
                </DataTable.Header>
                {datatableRow}
              </DataTable>
            </ScrollView>
            <DataTable.Pagination
              page={1}
              numberOfPages={3}
              onPageChange={(page) => { console.log(page); }}
              label="1-2 of 6"
            />
          </View>
          <View>
            <Text style={[LabelStyle.small_label, LabelStyle.brand]}>* Click row to modify.</Text>
          </View>
          <View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>Resource</Text>
              <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={resource} onChangeText={text => { setResource(text) }}></TextInput>
            </View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>Quantity</Text>
              <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} keyboardType={'numeric'} value={quantity} onChangeText={text => { setQuantity(text) }}></TextInput>
            </View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>Status/Description</Text>
              <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={status} onChangeText={text => { setStatus(text) }}></TextInput>
            </View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>Owner</Text>
              <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={owner} onChangeText={text => { setOwner(text) }}></TextInput>
            </View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>In-charge</Text>
              <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={incharge} onChangeText={text => { setIncharge(text) }}></TextInput>
            </View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>Updater</Text>
              <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={updater} onChangeText={text => { setUpdater(text) }}></TextInput>
            </View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>Date</Text>
              <DatePicker
                customStyles={{ dateInput: { borderWidth: 0, } }}
                style={[InputStyle.medium, { width: '94%' }, InputStyle.default, InputStyle.black]}
                date={datetime}
                mode="datetime"
                placeholder="Pick date and time"
                showIcon={false}
                confirmBtnText="Confirm"
                cancelBtnText="Cancel"
                showIcon={false}
                onDateChange={(date) => { setDatetime(date) }}
              />
            </View>
            <View style={{ paddingTop: '10%', alignItems: 'center' }}>
              {isModify ? [
                <View style={{ alignItems: 'center', flexDirection: 'row' }}>
                  <TouchableOpacity style={ButtonStyle.extra_small} onPress={() => { updateCaV() }}>
                    <Text style={ButtonStyle.medium_text}>Update</Text>
                  </TouchableOpacity>
                  <TouchableOpacity style={ButtonStyle.extra_small} onPress={() => { deleteCaV() }}>
                    <Text style={ButtonStyle.medium_text}>Delete</Text>
                  </TouchableOpacity>
                  <TouchableOpacity style={ButtonStyle.extra_small} onPress={() => { cancelModification() }}>
                    <Text style={ButtonStyle.medium_text}>Cancel</Text>
                  </TouchableOpacity>
                </View>
              ] : [<View style={{ alignItems: 'center' }}>
                <TouchableOpacity style={ButtonStyle.medium} onPress={() => { addCaV() }}>
                  <Text style={ButtonStyle.large_text}>Add +</Text>
                </TouchableOpacity>
              </View>]}
            </View>
          </View>
        </View>
      </ScrollView>
    </Fragment>
  );
}

export default CapacityAndVulnerabilityScreen;