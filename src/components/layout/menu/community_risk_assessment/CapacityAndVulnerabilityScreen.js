import React, { Component } from 'react';
import DatePicker from 'react-native-datepicker';
import { View, Text, ScrollView, TextInput, TouchableOpacity } from 'react-native';
import { ImageStyle } from '../../../../styles/image_style'
import { ContainerStyle } from '../../../../styles/container_style'
import { InputStyle } from '../../../../styles/input_style';
import { LabelStyle } from '../../../../styles/label_style';
import { ButtonStyle } from '../../../../styles/button_style';
import { DataTable } from 'react-native-paper';


export default class CapacityAndVulnerabilityScreen extends Component {
  constructor(props) {
    super(props);
    this.state = {
      datetime: "",
      resource: "",
      quantity: "",
      status: "",
      owner: "",
      incharge: "",
      updater: "",
      datatable_row: [],
      is_add: true,
      command_view: []
    };
  }


  selectCell(data) {
    let { resource, quantity, status, owner,
      incharge, updater, datetime } = data;

    this.setState({
      is_add: false
    });
    this.setState({
      resource: resource,
      quantity: quantity,
      status: status,
      owner: owner,
      incharge: incharge,
      updater: updater,
      datetime: datetime,
    })
    this.isModifyVisible();
  }


  isModifyVisible() {
    if (this.state.is_add == false) {
      this.setState({
        command_view: [
          <View style={{ paddingTop: '10%', alignItems: 'center', flexDirection: 'row'}}>
            <TouchableOpacity style={ButtonStyle.extra_small} onPress={() => { this.updateCaV() }}>
              <Text style={ButtonStyle.medium_text}>Update</Text>
            </TouchableOpacity>
            <TouchableOpacity style={ButtonStyle.extra_small} onPress={() => { this.deleteCaV() }}>
              <Text style={ButtonStyle.medium_text}>Delete</Text>
            </TouchableOpacity>
            <TouchableOpacity style={ButtonStyle.extra_small} onPress={() => { this.cancelModification() }}>
              <Text style={ButtonStyle.medium_text}>Cancel</Text>
            </TouchableOpacity>
          </View>
        ]
      })
    } else {
      this.setState({
        command_view: [
          <View style={{ paddingTop: '10%', alignItems: 'center' }}>
            <TouchableOpacity style={ButtonStyle.medium} onPress={() => { this.addCaV() }}>
              <Text style={ButtonStyle.large_text}>Add +</Text>
            </TouchableOpacity>
          </View>
        ]
      })
    }
  }

  cancelModification() {

  }

  updateCaV(data) {

  }

  deleteCaV() {

  }

  componentDidMount() {
    let temp_row = [];
    temp_row.push(
      <DataTable.Row onPress={() => {
        this.selectCell()
      }}>
        <DataTable.Cell style={{ width: 150 }}>Sample Resource</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>Sample Quantity</DataTable.Cell>
        <DataTable.Cell style={{ width: 200 }}>Active</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>John Geliberte</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>David Guevarra</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>Louie Nepomuceno</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>2019-08-16 13:00:00</DataTable.Cell>
      </DataTable.Row>
    )
    this.setState({ datatable_row: temp_row })
    this.isModifyVisible()
  }

  addCaV() {
    let { resource, quantity, status, owner,
      incharge, updater, datetime } = this.state;
    let temp_row = []
    let temp_data = this.state
    temp_row.push(this.state.datatable_row)
    temp_row.push(
      <DataTable.Row onPress={() => {
        this.selectCell(temp_data)
      }}>
        <DataTable.Cell style={{ width: 150 }}>{resource}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{quantity}</DataTable.Cell>
        <DataTable.Cell style={{ width: 200 }}>{status}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{owner}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{incharge}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{updater}</DataTable.Cell>
        <DataTable.Cell style={{ width: 150 }}>{datetime}</DataTable.Cell>
      </DataTable.Row>
    )
    this.setState({ datatable_row: temp_row })
  }

  render() {
    return (
      <ScrollView>
        <View style={ContainerStyle.content}>
          <View style={ContainerStyle.datatable_content}>
            <ScrollView horizontal={true}>
              <DataTable>
                <DataTable.Header>
                  <DataTable.Title style={{ width: 150 }}>Resource</DataTable.Title>
                  <DataTable.Title style={{ width: 150 }}>Quantity</DataTable.Title>
                  <DataTable.Title style={{ width: 200 }}>Status/Description</DataTable.Title>
                  <DataTable.Title style={{ width: 150 }}>Owner</DataTable.Title>
                  <DataTable.Title style={{ width: 150 }}>In-charge</DataTable.Title>
                  <DataTable.Title style={{ width: 150 }}>Updater</DataTable.Title>
                  <DataTable.Title style={{ width: 150 }}>Date</DataTable.Title>
                </DataTable.Header>
                {this.state.datatable_row}
              </DataTable>
            </ScrollView>
            <DataTable.Pagination
              page={1}
              numberOfPages={3}
              onPageChange={(page) => { console.log(page); }}
              label="1-2 of 6"
            />
          </View>
          <View>
            <Text style={[LabelStyle.small_label, LabelStyle.brand]}>* Click row to modify.</Text>
          </View>
          <View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>Resource</Text>
              <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={this.state.resource} onChangeText={text => this.setState({ resource: text })}></TextInput>
            </View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>Quantity</Text>
              <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={this.state.quantity} onChangeText={text => this.setState({ quantity: text })}></TextInput>
            </View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>Status/Description</Text>
              <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={this.state.status} onChangeText={text => this.setState({ status: text })}></TextInput>
            </View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>Owner</Text>
              <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={this.state.owner} onChangeText={text => this.setState({ owner: text })}></TextInput>
            </View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>In-charge</Text>
              <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={this.state.incharge} onChangeText={text => this.setState({ incharge: text })}></TextInput>
            </View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>Updater</Text>
              <TextInput style={[InputStyle.medium, InputStyle.default, InputStyle.black]} value={this.state.updater} onChangeText={text => this.setState({ updater: text })}></TextInput>
            </View>
            <View style={ContainerStyle.input_label_combo}>
              <Text style={LabelStyle.medium_label}>Date</Text>
              <DatePicker
                customStyles={{ dateInput: { borderWidth: 0, } }}
                style={[InputStyle.medium, { width: '95%' }, InputStyle.default, InputStyle.black]}
                date={this.state.datetime}
                mode="datetime"
                placeholder="Pick date and time"
                showIcon={false}
                confirmBtnText="Confirm"
                cancelBtnText="Cancel"
                showIcon={false}
                onDateChange={(date) => { this.setState({ datetime: date }) }}
              />
            </View>
            {this.state.command_view}
          </View>
        </View>
      </ScrollView>
    );
  }
}
